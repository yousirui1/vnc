#include "base.h"
#include "msg.h"
#include "queue.h"

static int sockfd = 0;
static struct sockaddr_in send_addr,recv_addr;
static int total_connections = 0;

/* h264 data queue */
unsigned char **vids_buf = NULL;
QUEUE *vids_queue = NULL;

rfb_request *request_ready = NULL;   //ready list head


void *thread_client_udp(void *param)
{
    int ret;
    pthread_attr_t st_attr;
    struct sched_param sched;
    
    rfb_format *fmt = (rfb_format *)param;

    ret = pthread_attr_init(&st_attr);
    if(ret)
    {   
        DEBUG("ThreadMain attr init error ");
    }   
    ret = pthread_attr_setschedpolicy(&st_attr, SCHED_FIFO);
    if(ret)
    {   
        DEBUG("ThreadMain set SCHED_FIFO error");
    }   
    sched.sched_priority = SCHED_PRIORITY_UDP;
    ret = pthread_attr_setschedparam(&st_attr, &sched);

    create_udp(server_ip, fmt->data_port, 0x0);
    client_udp_loop();
}


void *thread_client_tcp(void *param)
{
    int ret;
    pthread_attr_t st_attr;
    struct sched_param sched;
    
    ret = pthread_attr_init(&st_attr);
    if(ret)
    {   
        DEBUG("ThreadMain attr init error ");
    }   
    ret = pthread_attr_setschedpolicy(&st_attr, SCHED_FIFO);
    if(ret)
    {   
        DEBUG("ThreadMain set SCHED_FIFO error");
    }   
    sched.sched_priority = SCHED_PRIORITY_UDP;
    ret = pthread_attr_setschedparam(&st_attr, &sched);

    client_tcp_loop();
}











unsigned char read_msg_syn(unsigned char* buf)
{
    return *(unsigned char*)&buf[DATA_SYN_OFFSET];
}

unsigned short read_msg_order(unsigned char * buf)
{
    return *(unsigned short *)&buf[DATA_ORDER_OFFSET];
}

int read_msg_size(unsigned char * buf)
{
    return *(int*)&buf[DATA_LEN_OFFSET];
}

int recv_msg(const int fd,char* buf, const int len)
{   
    char * tmp = buf;
    int cnt = 0; 
    int read_cnt = 0; 
    while(read_cnt != len)
    {   
        cnt = recv(fd,tmp + read_cnt ,len - read_cnt,0);
        if(cnt == 0)
        {   
            return 1;
        }
        else
        {   
            if(cnt < 0)
            {   
                if(errno == EINTR || errno == EAGAIN)
                {   
                    continue;
                }
                return 1;
            }
        }
        read_cnt += cnt;
    }
    return 0;
}

    
    
int send_msg(const int fd, const char *buf, const int len)
{   
    const char* tmp = buf;
    int cnt = 0;
    int send_cnt = 0;
    while(send_cnt != len)
    {
        cnt =  send(fd, tmp + send_cnt ,len - send_cnt,0);
        if(cnt < 0)
        {
            if(errno == EINTR || errno == EAGAIN)
                continue;
            return 1;
        }
        send_cnt += cnt;
    }
    return 0;
} 



rfb_request *new_request()
{
	rfb_request* req = (rfb_request *) malloc(sizeof (rfb_request));
    if(!req)
    {
        DEBUG("malloc for new request");
        return NULL;
    }
    memset(req, 0, sizeof (rfb_request));

	req->display_id = -1;
	req->data_buf = NULL;
	
    return req;
}


rfb_request* remove_request(rfb_request *req)
{
    rfb_request *next = req->next;
	
    if(req->data_buf)
        free(req->data_buf);
    req->data_buf = NULL;

    if(req->display_id != -1)
    {
        displays[req->display_id].req = NULL;
        displays[req->display_id].play_flag = 0;
    }  

    dequeue(&request_ready, req);

    req->next = NULL;
    req->prev = NULL;
    free(req);
    total_connections--;
    return next;
}

int send_request(rfb_request *req)
{
    if(!req || !req->fd)
        return 0;

    char *tmp = malloc(HEAD_LEN + req->data_size + 1);
    if(!tmp)
    {
        return 0;
    }
    memcpy(tmp, req->head_buf, HEAD_LEN);
    memcpy(tmp + HEAD_LEN, req->data_buf, req->data_size);
    send_msg(req->fd, tmp, HEAD_LEN + req->data_size);
	DEBUG("send_request %d fd", req->status, req->fd);

    free(tmp);
}



int create_server_socket(void)
{   
    int server_s, sock_opt = -1;
    struct sockaddr_in server_sockaddr;
    memset(&server_sockaddr, 0, sizeof server_sockaddr);
    
#ifdef _WIN32
 	WSADATA wsData = {0};
    if(0 != WSAStartup(0x202, &wsData))
    {
        DEBUG("WSAStartup  fail");
        WSACleanup();
        return -1;
    }

 	server_s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	//DWORD retBytes;
	//tcp_keepalive inkeepAlive;
	//tcp_keepalive rekeepAlive;
	
	//inkeepAlive.onoff = 1;					 //探测次数
	//inkeepAlive.keepalivetime = 5500;        // 首次探测开始前的tcp无数据收发空闲时间	
	//inkeepAlive.keepaliveinterval = 3000;    // 每次探测的间隔时间
	

#if 0
	if(WSAIoctl(server_s, SIO_KEEPALIVE_VALS,
			&inkeepAlive, sizeof(inkeepAlive),
			&rekeepAlive, sizeof(rekeepAlive),
			&retBytes, NULL, NULL) != 0)
	{
		DIE("WSAIoctl Error: %d", WSAGetLastError());
	}
#endif
	
#else
 	server_s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (server_s == -1) {
        DIE("unable to create socket");
    }
    if (fcntl(server_s, F_SETFD, 1) == -1) {
        DIE("can't set close-on-exec on server socket!");
    }
    
    if ((sock_opt = fcntl(server_s, F_GETFL, 0)) < -1) {
        DIE("can't set close-on-exec on server socket!");
    }
     if (fcntl(server_s, F_SETFL, sock_opt | O_NONBLOCK) == -1) {
        DIE("fcntl: unable to set server socket to nonblocking");
    }

	int on = 1 ;
    int keepAlive = 1;      //heart echo open
    int keepIdle = 15;      //if no data come in or out in 15 seconds,send tcp probe, not send ping
    int keepInterval = 3;   //3seconds inteval
    int keepCount = 5;      //retry count
        
    if( setsockopt(server_s, SOL_SOCKET, SO_KEEPALIVE, (void*)&keepAlive, sizeof(keepAlive)) != 0) goto end_out;
    if( setsockopt(server_s, SOL_TCP, TCP_KEEPIDLE, (void*)&keepIdle, sizeof(keepIdle)) != 0) goto end_out;
    if( setsockopt(server_s, SOL_TCP, TCP_KEEPINTVL, (void *)&keepInterval, sizeof(keepInterval)) != 0) goto end_out;
    if( setsockopt(server_s, SOL_TCP, TCP_KEEPCNT, (void *)&keepCount, sizeof(keepCount)) != 0) goto end_out;
    
    if( setsockopt(server_s, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on)) !=0) goto end_out;

#endif
    
    server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_sockaddr.sin_port = htons(client_port);

    
    /* internet family-specific code encapsulated in bind_server()  */
    if (bind(server_s, (struct sockaddr *) &server_sockaddr,
                sizeof (server_sockaddr)) == -1) {
        DIE("unable to bind");
    }
    
    /* listen: large number just in case your kernel is nicely tweaked */
    if (listen(server_s, max_connections) == -1) {
        DIE("unable to listen");
    }
    return server_s;

end_out:
    close(server_s);
    return 0;
}  


void create_h264_socket(int display_size, rfb_display *displays)
{
	
	int i, maxfd;
	
	fd_set allset;

	FD_ZERO(&allset);
	
	vids_queue = (QUEUE *)malloc(sizeof(QUEUE) * display_size);
	vids_buf = (unsigned char **)malloc(display_size * sizeof(unsigned char *));

	DEBUG("display_size %d", display_size);
	for(i = 0; i < display_size; i++)
	{
		create_udp(NULL, i + 1 + h264_port, &displays[i]);
		FD_SET(displays[i].fd, &allset);
		maxfd = maxfd > displays[i].fd ? maxfd : displays[i].fd;	
		
		vids_buf[i] = (unsigned char *)malloc(MAX_VIDSBUFSIZE * sizeof(unsigned char));
        memset(vids_buf[i], 0, MAX_VIDSBUFSIZE);
        /* 创建窗口的对应队列 */
        init_queue(&(vids_queue[i]), vids_buf[i], MAX_VIDSBUFSIZE);
	}	
	udp_loop(display_size, maxfd, allset, displays );
}

void create_udp(char *ip, int port, rfb_display *display)
{
    int ret = -1;
    int sockfd;
    struct sockaddr_in send_addr,recv_addr;

    DEBUG("ip  %s, port %d", ip, port);

#ifdef _WIN32
    WSADATA wsData = {0};
    if(0 != WSAStartup(0x202, &wsData))
    {
        DEBUG("WSAStartup  fail");
        WSACleanup();
        return -1;
    }
    int socklen =  sizeof (struct sockaddr_in);
#else
    socklen_t socklen = sizeof (struct sockaddr_in);
#endif

    int opt = 0;
    /* 创建 socket 用于UDP通讯 */
    sockfd = socket (AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0)
    {
        DIE("socket creating err in udptalk");
    }

    if(NULL != ip)
    {
        memset (&send_addr, 0, socklen);
        send_addr.sin_family = AF_INET;
        send_addr.sin_port = htons (port);
        send_addr.sin_addr.s_addr = inet_addr(ip);
    }
    opt = 1;
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR , (char *)&opt, sizeof(opt)) < 0)
    {
        DIE("setsockopt SO_REUSEADDR");
    }

    opt = 32*1024;//设置为32K
    if (setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, (char *)&opt, sizeof (opt)) == -1)
    {
        DEBUG("IP_MULTICAST_LOOP set fail!");
	}

	opt = 32*1024;//设置为32K
    if (setsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, (char *)&opt, sizeof (opt)) == -1)
    {  
        DEBUG("IP_MULTICAST_LOOP set fail!");
    }  

    memset(&recv_addr, 0, sizeof(recv_addr));
    recv_addr.sin_family = AF_INET;
    recv_addr.sin_addr.s_addr = htonl (INADDR_ANY);
    recv_addr.sin_port = htons(port);

    /* 绑定自己的端口和IP信息到socket上 */
    if (bind(sockfd, (struct sockaddr *) &recv_addr,sizeof (struct sockaddr_in)) == -1)
    {  
        DIE("bind port %d err", port);
    }  

    display->fd = sockfd;
    display->port =  port;
    display->recv_addr = recv_addr;
    display->send_addr = send_addr;

    display->frame_size = 1024 * 1024 - 1;
    display->frame_pos = 0;
}


void tcp_loop(int listenfd)
{
	int maxfd, connfd, sockfd;
	int nready, ret;
	fd_set rset, allset;		

	struct sockaddr_in cliaddr, servaddr;
    socklen_t clilen = sizeof(cliaddr);

	maxfd = listenfd;

    FD_ZERO(&allset);
    FD_SET(listenfd, &allset);

	rfb_request *conn = NULL;
    rfb_request *current = NULL;
    rfb_request *temp = NULL;

	total_connections = 0;

	for(;;)
	{
		rset = allset; // structure assignment 
		ret = select(maxfd + 1, &rset, NULL, NULL, NULL);
		if(ret <= 0)
		{
			 if(errno == EINTR)
                continue;
            else if(errno != EBADF)
                DIE("select");
		}
		nready = ret;

		if(FD_ISSET(listenfd, &rset))
        {   
            connfd = accept(listenfd, (struct sockaddr *)&cliaddr, &clilen);
             
             if(connfd < 0)
                continue;

			conn = new_request();
            conn->fd = connfd;
			conn->data_size = HEAD_LEN;
                 
#ifdef _WIN32
            //memcpy(&cliaddr.sin_addr, conn->ip, sizeof(conn->ip));
#else
            ret = fcntl(connfd,F_GETFL,0);
            if(ret < 0)
            {   
                close(connfd);
                continue;
            }   
            if(fcntl(connfd, F_SETFL, ret | O_NONBLOCK) <0)
            {   
                close(connfd);
                continue;
            }

			/* recode client ip */
            if(inet_ntop(AF_INET,&cliaddr.sin_addr, conn->ip, sizeof(conn->ip)) == NULL)
            {
                close(connfd);
                free(conn);
                continue;
            }
#endif
			DEBUG("connfd fd %d", conn->fd);
			
            enqueue(&request_ready, conn);
            FD_SET(connfd, &allset);
			total_connections++;
            if(connfd > maxfd)
                maxfd = connfd;
             if(--nready <= 0)
                continue;
        }

		current = request_ready;
		while(current)
        {
            if((sockfd = current->fd) < 0)
                continue;

            if(FD_ISSET(sockfd, &rset))
            {
				if(current->status != DEAD || current->status != DONE)
				{
					if(current->has_read_head == 0)
					{
						if((ret = recv(current->fd, current->head_buf+current->data_pos,HEAD_LEN - current ->data_pos, 0)) <= 0)
						{
							if(ret < 0)
							{
								if(errno == EINTR || errno == EAGAIN)
									continue;
							}
							DEBUG("close fd %d", sockfd);
							close(current->fd);	
							FD_CLR(current->fd, &allset);
							current = remove_request(current);
                    		continue;
						}
						current->data_pos += ret;
						if(current->data_pos != HEAD_LEN)
							continue;
						if(read_msg_syn(current->head_buf) != DATA_SYN)
                        {
                            close(current->fd); 
                            FD_CLR(current->fd, &allset);
                            current  = remove_request(current);
                            continue;
                        }

						current->has_read_head = 1;
                        current->data_size = read_msg_size(current->head_buf);
                        current->data_pos = 0;
			
						if(current->data_size < 0 || current->data_size > CLIENT_BUF)
                        {
                            close(current->fd); 
                            FD_CLR(current->fd, &allset);
                            current = remove_request(current);
                            continue;
                        }
                        else
                        {
                            current->data_buf = (unsigned char*)malloc(current->data_size + 1);
                            if(!current->data_buf)
                            {
                            	close(current->fd); 
                            	FD_CLR(current->fd, &allset);
                                current = remove_request(current);
                                continue;
                            }
                            memset(current->data_buf, 0, current->data_size + 1);
                        }
					}	
					if(current->has_read_head == 1)
					{
						if((ret = recv(current->fd, current->data_buf + current->data_pos, current->data_size - current ->data_pos,0)) <= 0)
                        {   
							if(ret < 0)
							{
								if(errno == EINTR || errno == EAGAIN)
									continue;
							}
                            DEBUG("close fd %d\n", sockfd);
                            close(current->fd); 
                            FD_CLR(current->fd, &allset);
                            current = remove_request(current);
                            continue;
                        }
                        current->data_pos += ret;
						if(current->data_pos == current->data_size)
                        {
                            if(process_msg(current))
                            {
	                         	DEBUG("close fd %d\n", sockfd);
                            	close(current->fd); 
                            	FD_CLR(current->fd, &allset);
                            	current = remove_request(current);
                            	continue;
                            }
                            memset(current->head_buf, 0, HEAD_LEN);
                            current->data_size = 0;
                            current->data_pos = 0;
                            free(current->data_buf);
                            current->data_buf = NULL;
                            current->has_read_head = 0;
                        }

                        if(current->data_pos > current->data_size)
                        {
                            /** wow , something error **/
                            DEBUG("current->pos > current->size");
                            close(current->fd); 
                            FD_CLR(current->fd, &allset);
                            current =  remove_request(current);
                            continue;
                        }
					}
				}
				else
				{
				    DEBUG("close fd %d\n", sockfd);
					close(current->fd);	
					FD_CLR(current->fd, &allset);
					current = remove_request(current);
                    continue;
				}
                if(--nready <= 0)
                    break;
            }
            current = current->next;
        }
	}
}

void udp_loop(int display_size, int maxfd, fd_set  allset, rfb_display *clients)
{
	int i, ret, nready;
	struct timeval tv;
	fd_set fds;
	
	tv.tv_sec = REQUEST_TIMEOUT;
    tv.tv_usec = 0l;

    int sockfd = -1;
    socklen_t socklen = sizeof (struct sockaddr_in);

#if 0
	unsigned int total_size = 0;
    unsigned int tmp_size = 0;
    unsigned char buf[MAX_VIDSBUFSIZE] = {0};
    unsigned int offset = 0;
    //unsigned char *tmp;

	unsigned char tmp[DATA_SIZE + sizeof(rfb_head)] = {0};
    unsigned short count = 0;
    unsigned short current_count = 0;
#endif

	    unsigned char buf[MAX_VIDSBUFSIZE] = {0};
    unsigned int offset = 0;
    //unsigned char *tmp;
    //unsigned short count = 0;
    //unsigned short current_count = 0;
    unsigned short num = 0;
    unsigned short total_num = 0;
    unsigned char tmp[DATA_SIZE + sizeof(rfb_packet)] = {0};
    unsigned char *data = &tmp[0] + sizeof(rfb_packet);
    unsigned short data_len = 0;
	rfb_packet *packet = (rfb_packet *)&tmp[0];

    for(;;)
    {
        fds = allset;
        ret = select(maxfd + 1, &fds, NULL, NULL, &tv);
        if(ret <= 0)
            continue;

        nready = ret;
        for(i = 0; i < display_size; i++)
        {
            if((sockfd = clients[i].fd) < 0)
                continue;
            if(FD_ISSET(sockfd, &fds))
            {
            	//ret = recvfrom(sockfd, (char *)clients[i].frame_buf + clients[i].frame_pos, clients[i].frame_size - clients[i].frame_pos, 0,
                    //(struct sockaddr*)&(clients[i].recv_addr), &socklen);
				ret = recvfrom(sockfd, (char *)tmp, DATA_SIZE + sizeof(rfb_packet), 0, 
						(struct sockaddr*)&(clients[i].recv_addr), &socklen);
	
				if(ret < 0)
					continue;

            	//tmp = &(clients[i].frame_buf[clients[i].frame_pos]);
            	//clients[i].frame_pos += ret;
            		     
				if(packet->num == 0)
				{
					total_num = packet->total_num;
                	offset = 0;
                	num = 0;	
				}
				if(packet->num == num)
				{
					data_len = packet->length;
                	memcpy(buf + offset, data, data_len);
                	offset += data_len;
                	num++;
				}
				if(num == total_num)
				{
					en_queue(&vids_queue[i], buf, offset, 0x0);	
					offset = 0;
				}
				
			}
#if 0
             if(tmp[0] == 0xff && tmp[1] == 0xff)
             {
                count = *((unsigned short *)&tmp[2]);
                if(count != clients[i].current_count)
                {
                    if(clients[i].current_count == 0)
                    {
                        clients[i].current_count = count;
                        continue;
                    }
                    total_size = *((unsigned int *)&tmp[4]);
                   	en_queue(&vids_queue[i], clients[i].frame_buf + 8,  clients[i].frame_pos - ret - 8, 0x0);
                    memcpy(clients[i].frame_buf, tmp, ret);
                    clients[i].frame_pos = ret;
                    clients[i].current_count = count;
                }
                else
                {
                    if(clients[i].frame_pos == clients[i].frame_size + 8)
                    {
                        en_queue(&vids_queue[i], clients[i].frame_buf + 8, offset - 8, 0x0);
                        clients[i].frame_pos = 0;
                        clients[i].frame_size = 0;
                        clients[i].current_count = 0;
                    }
                }
              }
              if(--nready <= 0)
                break;
            }
#endif
        }
    }
}

