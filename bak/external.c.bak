#include "base.h"
#include "external.h"

#ifdef _WIN32
/*
启动启动监控服务 （教师端调用）
@param clientPort 
@param controlPort j接收端地址,组播地址
@param dataPort 接收端端口
@param winStyleFlag 图像质量0-100
@param pageSize 图像质量0-100
成功返回0, 否则返回对应错误号
*/

HWND hwnd = NULL;
static stop_callback call_back;

CAPTUREANDCAST_API int StartMonitorServer(HDC dc, const int clientPort, const int controlPort, const int dataPort, const int winStyleFlag, const int pageSize, stop_callback call)
{
	init_logs();
	server_flag = 1;
	client_port = clientPort;
	control_port = controlPort;
	h264_port = dataPort;
	window_flag = winStyleFlag;
	window_size = pageSize;

#if 0
	if(!call || !dc)
	{
		DEBUG("HDC or callback function is NULL!!");
		return ERROR;
	}

	hwnd = WindowFromDC(dc);
#endif

    DEBUG("\nprograme server: \n client_port %d, control_port %d, h264_port %d, window_flag %d, window_size %d,",
                 client_port, control_port, h264_port, window_flag, window_size);
	call_back = call;
	//init_server();
	return 0;
}

/*
停止监控服务（教师端调用）
@param clientPort 启动成功后返回的实例句柄
@param controlPort j接收端地址,组播地址
@param dataPort 接收端端口
@param winStyleFlag 图像质量0-100
@param pageSize 图像质量0-100
成功返回0, 否则返回对应错误号
*/
CAPTUREANDCAST_API int StopMonitorServer()
{
	DEBUG("StopMonitorServer end");
	call_back = NULL;
	hwnd = NULL;
	//close_window();

	close_logs();
	return SUCCESS;
}

CAPTUREANDCAST_API int DisconnectAllClient()
{
	DEBUG("DisconnectAllClient");
	return 0;		
}


CAPTUREANDCAST_API int ExitControl()
{
	DEBUG("ExitControl");
	return 0;
}


/*
启动被监控端连接（学生端用）
@param clientPort 启动成功后返回的实例句柄
@param controlPort j接收端地址,组播地址
@param dataPort 接收端端口
@param winStyleFlag 图像质量0-100
@param pageSize 图像质量0-100
成功返回0, 否则返回对应错误号
*/

CAPTUREANDCAST_API int StartMonitorClient(const char* serverIp, const int serverPort, const char* clientFlag)
{
	init_logs();

	//server_ip = strdup(serverIp);	
	//server_port = serverPort;

    DEBUG("\nprograme client: \n server_ip %s, server_port %d, window_flag %d, default_fps %d",
               server_ip, server_port, window_flag, default_fps);
	return SUCCESS;
}

/*
设置分页相关属性
@param clientPort 启动成功后返回的实例句柄
@param controlPort j接收端地址,组播地址
@param dataPort 接收端端口
@param winStyleFlag 图像质量0-100
@param pageSize 图像质量0-100
成功返回0, 否则返回对应错误号
*/
CAPTUREANDCAST_API int SetPageAttribute(const int pageIndex, const int pageSize, struct StudentInfo *info, const int length)
{
	DEBUG("SetPageAttribute pageIndex: %d pageSize: %d length %d", pageIndex, pageSize, length);
	return SUCCESS;
}

/*
获取分页属性
启动启动监控服务 （教师端调用）
@param clientPort 启动成功后返回的实例句柄
@param controlPort j接收端地址,组播地址
@param dataPort 接收端端口
@param winStyleFlag 图像质量0-100
@param pageSize 图像质量0-100
成功返回0, 否则返回对应错误号
*/
CAPTUREANDCAST_API int GetPageCount()
{
	return SUCCESS;
}


void stop_server()
{
	if(call_back)
		call_back();
	call_back = NULL;
}


#endif
